{
  "keyboard_shortcut": "", 
  "name": "markdownFormatter", 
  "language": "JavaScript", 
  "trigger": "trigger_startup", 
  "value": [
    "/** Merge includes in markdown file", 
    " *", 
    " * Edited file must has name '-source.md'\tE.G: 'readme-source.md'", 
    " * Compiled file has suffix removed\tE.G: 'readme.md'", 
    " *", 
    " * INCLUDE SYNTAX:", 
    " * \t\t{include:relative\\path} ", 
    " * \tE.G:\t{include:\\Documentation\\controls\\controls-items\\controls-items.ahk} ", 
    " * ", 
    " */", 
    "", 
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "\t", 
    "", 
    "ko.extensions.vilbur.markdownFormatter = function()", 
    "{", 
    "\t", 
    "\t//var Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\tvar koEditor\t= require(\"ko/editor\");", 
    "\tvar koFile\t= require(\"ko/file\");", 
    "\tvar koFileEx\t= Components.classes[\"@activestate.com/koFileEx;1\"].createInstance(Components.interfaces.koIFileEx);", 
    "", 
    "\t", 
    "\tvar current_file\t= ko.views.manager.currentView.koDoc.file.path;", 
    "\tvar current_dir\t= koFile.dirname(current_file);", 
    "\t//var file_content\t= koEditor.getValue();", 
    "\tvar file_content\t= removeEmptyEverySecondLine(koEditor.getValue());", 
    "\t", 
    "\t/* ECTENSIONS ALLOWED TO BE INCLUDED */ ", 
    "\tvar allowed_extensions\t= /(komodotool|ktf|md|ahk|php|js|html|xul|ms)/gi; // allowed extension for including IMPORTANT: Add new extension to getLang() method", 
    "", 
    "\t/* DO NOT INCLUDE LINKS PRECCEDED BY CHARACTER */ ", 
    "\tvar exclude_characters = ';';", 
    "", 
    "\t/* FIND ALL OCCURENCES OF \"inlcudes\" */", 
    "\t", 
    "\t\t\t//file_content.match( new RegExp( '/[^'+exclude_characters+']/', 'gi') ) ", 
    "\t//var includes\t= file_content.match( new RegExp( '/'+exclude_characters+'*\\\\[include:.*\\\\]/', 'gi') ) ", 
    "", 
    "\tvar includes\t= file_content.match(/;*\\[include:.*\\]/gi);", 
    "", 
    "\t/* EXIT IF included file has not allowed extension */ ", 
    "\tif ( current_file.match(/-source.md$/gi) == null  )", 
    "\t\treturn;", 
    "", 
    "\t/** file read add empty line below every line", 
    "\t */", 
    "\tfunction removeEmptyEverySecondLine(string)", 
    "\t{", 
    "\t\t//return string.replace(/^/gm, '~~~').replace(/~~~\\n~~~/gm, '~~~').replace(/~~~/gm, '');", 
    "\t\treturn string", 
    "\t\t\t.replace(/^/gm, '~~~')", 
    "\t\t\t.replace(/~~~\\n~~~/gm, '~~~')", 
    "\t\t\t.replace(/~~~/gm, '');\t\t", 
    "\t}", 
    "\t\t", 
    "\t/** get icluded file content and wraop to codeblock", 
    "\t */", 
    "\tfunction getIncludeContent(path)", 
    "\t{", 
    "\t\t", 
    "\t\t/** Include *.ahk file", 
    "\t\t */", 
    "\t\tthis.include_ahk = function(file_content)", 
    "\t\t{", 
    "\t\t\t/** remove line starts with #", 
    "\t\t\t */", 
    "\t\t\tfunction removeDirectives()", 
    "\t\t\t{", 
    "\t\t\t\t//return string.replace(/#.*([\\r\\n]|$)/gmi, '');", 
    "\t\t\t\tfile_content = file_content.replace(/#.*([\\r\\n]+|$)/gmi, '');\t\t\t\t", 
    "\t\t\t}", 
    "\t\t\t/** remove lines with commented autohotkey dump E.G.: \";;;Dump(...)\"", 
    "\t\t\t */", 
    "\t\t\tfunction removeDumps()", 
    "\t\t\t{", 
    "\t\t\t\tfile_content = file_content.replace(/[\\r\\n]\\s*;+\\s*Dump.*([\\r\\n]|$)/gmi, '');\t\t", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\tremoveDirectives();", 
    "\t\t\tremoveDumps();", 
    "\t\t\t", 
    "\t\t\treturn removeEmptyEverySecondLine(file_content).replace(/^\\s+/gi, '');", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Include *.komodotool file", 
    "\t\t */", 
    "\t\tthis.include_komodotool = function(file_content)", 
    "\t\t{", 
    "\t\t\t/* PARSE JSON TO TEXT - komodotool  */ ", 
    "\t\t\tvar file_content_obj\t= JSON.parse(file_content);", 
    "", 
    "\t\t\tvar value\t= file_content_obj.value;", 
    "\t\t", 
    "\t\t\treturn value.join('\\n').trim();", 
    "", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Include komodotool *.ktf file", 
    "\t\t */", 
    "\t\tthis.include_ktf = function(file_content)", 
    "\t\t{", 
    "\t\t\t/* Remove block comment from start of string, */ ", 
    "\t\t\tfile_content = file_content.replace(/^\\s*\\/\\*[\\s\\S]*?\\*\\/\\s*/, '');", 
    "", 
    "\t\t\treturn removeEmptyEverySecondLine(file_content);", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Include *.ms file", 
    "\t\t */", 
    "\t\tthis.include_ms = function(file_content)", 
    "\t\t{", 
    "\t\t\tfile_content = file_content.replace(/^(filein|clearListener).*$[\\r\\n]*/gmi, '');\t\t\t\t", 
    "", 
    "\t\t\t//var file_content_obj\t= JSON.parse(file_content); ", 
    "\t\t\t//var value\t= file_content_obj.value;", 
    "\t\t\t", 
    "\t\t\treturn removeEmptyEverySecondLine(file_content);", 
    "\t\t};", 
    "", 
    "\t\t/** Include *.ms file", 
    "\t\t */", 
    "\t\tthis.include_md = function(file_content)", 
    "\t\t{", 
    "\t\t\t//file_content = file_content.replace(/^(filein|clearListener).*$[\\r\\n]*/gmi, '');\t\t\t\t", 
    "", 
    "\t\t\t//var file_content_obj\t= JSON.parse(file_content); ", 
    "\t\t\t//var value\t= file_content_obj.value;", 
    "\t\t\t", 
    "\t\t\treturn file_content;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** get language by file extension", 
    "\t\t */", 
    "\t\tvar getLang = function(_extension)", 
    "\t\t{", 
    "\t\t\tswitch (_extension) {", 
    "\t\t\t\tcase 'md':", 
    "\t\t\t\t\treturn \"markdown\";", 
    "\t\t\t\t", 
    "\t\t\t\tcase 'ahk':", 
    "\t\t\t\t\treturn \"php\";", 
    "\t\t\t\t", 
    "\t\t\t\tcase 'ms':", 
    "\t\t\t\t\treturn \"maxscript\";", 
    "\t\t\t", 
    "\t\t\t\tcase 'js':", 
    "\t\t\t\t\t", 
    "\t\t\t\tcase 'komodotool':", 
    "\t\t\t\t\treturn \"javascript\";", 
    "\t\t\t\t\t", 
    "\t\t\t\tcase 'ktf':", 
    "\t\t\t\t\treturn \"javascript\";", 
    "\t\t\t\t", 
    "\t\t\t\tcase 'html':", 
    "\t\t\t\t\t", 
    "\t\t\t\tcase 'xul':", 
    "\t\t\t\t\treturn \"xml\";\t\t\t\t\t", 
    "\t\t\t\t", 
    "\t\t\t\tdefault:\treturn _extension;", 
    "\t\t\t}", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Extensin is allowed", 
    "\t\t */", 
    "\t\tvar extension = (function()", 
    "\t\t{", 
    "\t\t\t\t", 
    "\t\t\tvar extension_match = allowed_extensions.exec(path);", 
    "\t\t\t", 
    "\t\t\tallowed_extensions.lastIndex = 0; // reset regEx for next use", 
    "\t\t\t//console.log(  'extension_match: ' + extension_match );", 
    "", 
    "\t\t\tif( ! extension_match ){", 
    "\t\t\t\tvar file_current_extension\t= koFile.basename(path).split(/\\./g).pop();", 
    "\t\t\t\t", 
    "\t\t\t\t", 
    "\t\t\t\talert( 'markdownFormatter:\\n\\tUnsupported extension: *.'+file_current_extension + \"\\n\\nADD EXTESNTION TO:\\n\\tmarkdownFormatter.allowed_extensions\");  ", 
    "\t\t\t\treturn false;", 
    "\t\t\t", 
    "\t\t\t}", 
    "\t\t\t//console.log(  'extension_match: ' + extension_match );", 
    "\t\t\t", 
    "\t\t\tvar extension = extension_match.pop();", 
    "\t\t", 
    "\t\t\treturn extension.toLowerCase();;", 
    "\t\t})(); ", 
    "\t\t", 
    "", 
    "\t\t", 
    "\t\tif( ! extension )", 
    "\t\t\treturn;", 
    "\t\t", 
    "\t\t/* INCLUDE BY FILEYPE", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar path_included = current_dir + path;", 
    "\t\t", 
    "\t\tif( ! koFile.exists(path_included))", 
    "\t\t\treturn \"[\"+path+\"](\"+path+\")\"; // return relative link if file does not exists", 
    "\t\t", 
    "\t\tvar file_content\t = koFile.read(path_included);", 
    "\t\t", 
    "\t\tvar method = 'include_'+ extension\t\t", 
    "\t\t", 
    "\t\tvar include_content\t= this[method] ? this[method](file_content) : removeEmptyEverySecondLine(file_content);", 
    "", 
    "\t\t", 
    "\t\tif ( extension.match(/md/gi) )", 
    "\t\t\treturn include_content;", 
    "", 
    "\t\telse", 
    "\t\t\treturn '\\n``` '+getLang(extension)+'\\n'+include_content+'\\n```';", 
    "\t}", 
    "\t", 
    "\tfunction writeToFile(path, content)", 
    "\t{", 
    "\t\t", 
    "\t\t//koFile.create( path, content, true );", 
    "\t\t//koFile.create( path, '# content', true );", 
    "\t\t", 
    "\t\tif(koFile.exists(path))", 
    "\t\t\tkoFile.remove(path);", 
    "\t\t\t", 
    "\t\tkoFile.create( path ); ", 
    "\t\tkoFileEx.path = path;  ", 
    "\t\tkoFileEx.open(\"w\");", 
    "\t\tkoFileEx.puts(content);", 
    "\t\tkoFileEx.close();", 
    "\t}", 
    "\t/** Escape for Markdown synatax", 
    "\t */", 
    "\tvar escapeContent = function(string)", 
    "\t{", 
    "\t\treturn string", 
    "\t\t\t\t.replace(/(\\w)\\|(\\w)\\|*/gi, '$1\\\\|$2') // sanitize \"|\" pipe E.G.: \"A|B\"", 
    "\t\t\t\t.replace(/\\t/gi, '    ');", 
    "\t\t\t\t//.replace(/\\|/gi, '$1!\\\\|$2') // sanitize \"|\" pipe E.G.: \"A|B\"\t\t\t\t", 
    "\t}; ", 
    "// --- Polyfill for String.prototype.padStart ---", 
    "// This ensures the function works in older JavaScript environments that don't have padStart.", 
    "if (!String.prototype.padStart) {", 
    "    String.prototype.padStart = function padStart(targetLength, padString) {", 
    "        targetLength = targetLength >> 0; //truncate if number or convert non-number to 0;", 
    "        padString = String((typeof padString !== 'undefined' ? padString : ' '));", 
    "        if (this.length > targetLength) {", 
    "            return String(this);", 
    "        } else {", 
    "            targetLength = targetLength - this.length;", 
    "            if (targetLength > padString.length) {", 
    "                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed", 
    "            }", 
    "            return padString.slice(0, targetLength) + String(this);", 
    "        }", 
    "    };", 
    "}", 
    "/**", 
    " * Replaces all non-ASCII characters in a string with their Unicode escape sequence.", 
    " * @param {string} str The input string.", 
    " * @returns {string} The string with non-ASCII characters escaped.", 
    " */", 
    "function escapeUnicode(str) {", 
    "    // This regular expression /[^\\x00-\\x7F]/g matches any character", 
    "    // that is NOT in the ASCII range (from hex 00 to 7F).", 
    "    // The 'g' flag ensures all occurrences are replaced, not just the first.", 
    "    return str.replace(/[^\\x00-\\x7F]/g, (_char) => {", 
    "        // For each matched character, this function is called.", 
    "        // 1. _char.charCodeAt(0) gets the character's decimal UTF-16 code unit value.", 
    "        // 2. .toString(16) converts that decimal value to a hexadecimal string.", 
    "        // 3. .padStart(4, '0') ensures the hex string is always 4 digits long by adding leading zeros if needed.", 
    "        // 4. '\\\\u' is prepended to create the final escape sequence (e.g., \\u2500).", 
    "        //    We use a double backslash '\\\\' so that it's treated as a literal backslash in the final string.", 
    "        //return '\\\\u' + _char.charCodeAt(0).toString(16).padStart(4, '0');", 
    "\t\t", 
    "\t\tescaped = '\\\\u' + _char.charCodeAt(0).toString(16).padStart(4, '0');", 
    "\t\t\t\tconsole.log(  'escaped: ' + escaped );", 
    "", 
    "\t\treturn '\\\\u2502';", 
    "    });", 
    "}", 
    "", 
    "", 
    "\t/* Escape readme content wihtout included scripts", 
    "\t **/", 
    "\t//file_content =  escapeContent(file_content);", 
    "    //console.log(  'file_content: ' + file_content );", 
    "\t//file_content =  escapeUnicode(file_content);", 
    "\t//file_content =  replaceBoxChars(file_content);", 
    "", 
    "\t//", 
    "\t///**", 
    "\t// */", 
    "\t//if( includes )", 
    "\t//", 
    "\t//\t/* LOOP EACH LINK TO INCLUDE */ ", 
    "\t//\tfor(var i=0; i<includes.length;i++)", 
    "\t//\t", 
    "\t//\t\t/* IF LINK IS NOT ESCAPED */ ", 
    "\t//\t\tif ( ! includes[i].match( new RegExp( '^'+exclude_characters, 'gi') ) )", 
    "\t//\t\t{", 
    "\t//\t\t\t/* GET ONLY PATH FROM LINK */ ", 
    "\t//\t\t\tvar path_included = new RegExp(/\\[include:(.*)\\]/gi).exec(includes[i]).pop();", 
    "\t//", 
    "\t//\t\t\t/* REPLACE LINK WITH CONTENT OF INCLUDED FILE */ ", 
    "\t//\t\t\tfile_content = file_content.replace(includes[i], getIncludeContent(path_included));", 
    "\t//\t\t}", 
    "\t//\t\t//else", 
    "\t//\t\t//\tconsole.log(  'include escaped: ' + includes[i] );", 
    "\t//", 
    "\t", 
    "\t/* REMOVE SUFFIX FOR FINAL FILENAME */ ", 
    "\tfile_path = current_file.replace(/-source.md$/gi, '.md');", 
    "", 
    "\t/* WRITE COMPILED CONTENT TO NEW FILE */ ", 
    "\twriteToFile( file_path, file_content );", 
    "\t", 
    "};", 
    "", 
    "", 
    "/* TEST */", 
    "ko.extensions.vilbur.markdownFormatter();"
  ], 
  "version": "1.1.5", 
  "rank": 100, 
  "trigger_enabled": 1, 
  "async": 1, 
  "type": "macro"
}