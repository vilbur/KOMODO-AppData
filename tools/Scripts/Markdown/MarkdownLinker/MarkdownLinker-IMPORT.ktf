/*
komodo tool: MarkdownLinker-IMPORT
==================================
async: 0
is_clean: true
language: JavaScript
rank: 100
trigger: trigger_postopen
trigger_enabled: 0
type: macro
version: 1.1.5
==================================*/
if( typeof ko.extensions.vilbur === 'undefined' )
	ko.extensions.vilbur = {};
	
if( typeof ko.extensions.vilbur.markdown === 'undefined' )
	ko.extensions.vilbur.markdown = {};

/** Search in tree of current file, and write links to files matching criteria
 *
 * @method	self	searchName( string search_name )	Search file name	DEFAULT: '.*'
 * @method	self	searchExt( string file_ext )	Search file extension	DEFAULT: 'php|ahk|js'
 * @method	self	matchDirName( boolean|string match )	Search only files which name is same as folder name E.G.: "FooBar\FooBar.php"	DEFAULT: false
 * 
 * @method	self	maxLevel( int max_level )	Set depth of tree for searching	DEFAULT: unlimited
 *
 * @method	self	linkToDir( boolean link )	Set link to dir E.G.: "\dir\subdir\file.*" >>> "\dir\subdir"	DEFAULT: false
 * @method	self	textBy( string show )	Set text of link by sanitized filename or directory*	DEFAULT: 'dir'
 * @method	self	indentation( boolean|string indentation )	Set indentation of links by directory tree*	DEFAULT: false
 * @method	self	codeBlock( boolean code_block)	Link is included as codeblock E.G.: [include:\dir\file.komodotool] 	DEFAULT: false
 *
 * @method	self	heading( string heading )	Set heading above included block	DEFAULT: ''
 * @method	self	update( boolean update )	Update mode will update existing section, heading must be set	DEFAULT: true
 * @method	self	unique( boolean unique )	Include only if not in file content already	DEFAULT: false
 * 
 * @method	void	include()	Include matching files as links
 */
ko.extensions.vilbur.markdown.MarkdownLinker = (function()
{
	var komodo_view = komodo.view;
	
	function MarkdownLinker()
	{
		var Logger	= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');
		var initialized	= false;
		
		var koFile	= require("ko/file");
		var koEditor	= require("ko/editor");
		var scimoz	= ko.views.manager.currentView.scimoz; 
		var current_file	= ko.views.manager.currentView.koDoc.file.path;
		var current_dir	= koFile.dirname(current_file);
		var file_content	= koEditor.getValue();
		var is_source	= current_file.match(/-source.md$/gi);
		var include_lines	= [];
		/* Search options */
		var search_extensions	= /\.(php|ahk|js|md)$/gi; // these extensions is used for auto find extension
		var extension_image	= /\.(jpg|png|ico)$/gi; // 
		var mask	= '';
		var mask_rx	= null;
		var extension	= '';
		//var search_ext	= '';
		//var search_name	= '.*';				
		var match_dir_name	= false;
		
		/* TYPES OF INCLUDED CONTETN */ 
		var rx_file_types = {
			image:	/\.(jpg|png|jpg)$/gi,
			markdown:	/\.(md)$/gi,
			codeblock:	search_extensions,
		};
						
		/* Tree options */
		var max_level	= null;
		
		/* Write options */
		var heading	= '';
		var show	= 'name'; // display text by "name|dir|path" DEFAULT:name
		var filter	= null;   // "null|file|dir" > Show files, dirs or both if null 
		var link	= true;
		var html	= false; // Display texk as HTML -- allows coloring of text
		var indentation	= false;
		var tree	= false;
		var image_show	= false; // Interprets link to image as image

		var code_block	= false;
		var update	= true;
		var unique	= false;
			
		/* result array
		 */
		var match_files	= [];
		
		/* DEVELOPMENT */ 
		var developmentPrint = function(dir_tree, level = 0 )
		{
				console.log( path + 'DEVELOPMENT: developmentPrint()');

			for(var path in dir_tree)
			{
				console.log( path + ': ' + dir_tree[path] );
				if( typeof dir_tree[path] === "object" )
					developmentPrint(dir_tree[path], level++ );
				
			}
		};
		
		/* ========= OPTIONS ========= */

		/** Set search_ext for search match
		 */
		this.mask = function(_mask=''){ mask = _mask; return this; };

		/** Set search extension
		 */
		this.extension = function(_extension=''){ extension = _extension; return this; };

		/** Search only files which name is same as folder name E.G.: "FooBar\FooBar.php"
		 */
		this.matchDirName = function(match=true){ match_dir_name = match; return this; };

		/*---------------------------------------
			TREE OPTIONS
		-----------------------------------------
		*/
		/** Set depth of tree for searching
		 * Default is unlimited levels
		 */
		this.maxLevel = function(_max_level = 1){ if(initialized) max_level = _max_level; return this; };
		
		/* ================ WRITE OPTIONS ================ */

		/** Show HTML elements - ALLOWS COLORS
		 */
		this.html = function(_html=true){ if(initialized) html = _html; return this; };

		/** Set link to dir E.G.: "\dir\subdir\file.*" >>> "\dir\subdir"
		 */
		this.link = function(_link=true){ link = _link; return this; };
		
		/** Set link to dir E.G.: "\dir\subdir\file.*" >>> "\dir\subdir"
		 */
		this.image = function(image=true){ if(initialized) image_show = image; return this; };

		/** Set indentation of links by directory tree
		 */
		this.indentation = function(_indentation = true){ if(initialized) indentation = _indentation; return this; };

		/** Show tree indentation
		  */
		this.tree = function(_tree = true){ if(initialized) tree = _tree; return this; };
		
		/** Show file, directory or both
		 */
		this.filter = function(_filter = 'file'){ filter = _filter; return this; };
 
		/** Set text of link by sanitized filename or directory
		 */
		this.show = function(_show = 'name'){ show = _show; return this; };
 
		/** Set heading above included block
		 */
		this.heading = function(_heading, heading_prefix = '###'){ heading = heading_prefix +' '+_heading; return this; };

		/** Include only if not in file content already
		 */
		this.unique = function(_unique=true){ unique = _unique; return this; };

		/** Link is included as codeblock E.G.: [include:\dir\file.komodotool]  
		 *  Include is treated with markdownFormatter.komodotool
		 */
		this.codeBlock = function(_code_block=true){ code_block = _code_block; return this; };

		/** Update mode will update existing section
		 */
		this.update = function(_update=true){ update = _update; return this; };

		
		/**
		 * Convert nested object to 2D matrix
		 * Each row is a path to a leaf value
		 * Columns = maximum depth
		 */
		function objectToMatrix(obj) {
			let rows = [];
			let maxDepth = 0;
		
			function traverse(node, path) {
				if (node !== null && typeof node === "object" && !Array.isArray(node)) {
					for (let key in node)
					{
						if (node.hasOwnProperty(key)) 
						traverse(node[key], [...path, key]);
					}
				} else {
					//rows.push([...path, node]);
					rows.push([...path, node]);
					maxDepth = Math.max(maxDepth, path.length + 1); // +1 includes value column
				}
			}
		
			traverse(obj, []);
		
			// Normalize rows to have equal column count
			let matrix = rows.map(row => {
				let padded = [...row];
				
				while (padded.length < maxDepth) padded.push(null);
				
				return padded;
			});
		
			return matrix;
		}

		/* ================ INCLUDE ================ */
		
		/** Include matching files as links
		 */
		this.include = function()
		{
			/* ========= GET DIRECTORY TREE ========= */

			var getDirectoryTree = function(path, level = 0 )
			{
				/** Get subdirs in dir
				 */
				var getSubDirs = function(path)
				{
					return koFile.list(path).filter(function(dir){
									return ! koFile.isFile(path+'\\'+dir);
								});
				};
				/** Get files in dir
				  */
				var getFiles = function(path)
				{
					return koFile.list(path).filter(function(dir){
									return koFile.isFile(path+'\\'+dir);
								});
				};
					
				var subdirs	= getSubDirs(path);
				var files	= getFiles(path);
				var dirs_and_files	= {};

				//Logger.info(level >= max_level, 'MarkdownLinker: '+'level >= max_level'); 
				if( max_level && level == max_level )
					return; 

				//console.log( 'mask: ' + mask );

				/* DEFINE REG EX */ 
				//if( mask != '' )
					mask_rx = new RegExp( mask, 'gi');
				
				var	extension_rx = extension != '' ? new RegExp( '.*\.' + extension + '$', 'gi') : null;

				/* LOOP IF ANY SUBDIR EXISTS */ 
				if( subdirs.length )
				{
					depth_added = level++;
					
					/*------ ADD SUBDIRS ------*/
					for(var d=0; d<subdirs.length;d++)
					{
						var sudirs_and_files = getDirectoryTree( path+'\\'+subdirs[d], level);
						//console.log(  'sudirs_and_files: ' + sudirs_and_files );

						//if( mask == '' || mask_rx.exec(files[index]) )
							//dirs_and_files[index] = 'level: '+level+ ' ' + files[index];						
						
						//if( sudirs_and_files != null )
						if( sudirs_and_files  )
							dirs_and_files[subdirs[d]] = sudirs_and_files;
						
					}
						//if( mask == '' || mask_rx.exec(path) )
				}

				/*------ ADD FILES ------*/
				for( var index in files )
					if (files.hasOwnProperty(index))
					{
						//console.log(  'extension: ' + extension );

						//console.log( 'FILE: ' + files[index] );
						//console.log( 'TEST: ' + extension_rx.exec(files[index]) );

						//if( mask == '' || mask_rx.exec(files[index]) )
						if( extension === '' || extension_rx.exec(files[index]) )
							dirs_and_files[index] = files[index];
							//dirs_and_files[index] = 'level: '+level+ ' ' + files[index];

						if( extension_rx )
							extension_rx.lastIndex = 0; // reset regEx for next use
						

					}
				
				/* RETURN SUBDIRS and FILES if any exists */
				return Object.keys(dirs_and_files).length ? dirs_and_files : null;
			};
			
			/* ========= SEARCH IN SUBDIRS FOR FILES matching criteria ========= */

			var searchForFiles = function(_dir_path, dir_tree)
			{

				/** filterFilesByExtension
				*/
				var filterFilesByExtension = function(_dir_path)
				{
				   /** Find matching file type in files by search_extensions
					*/
				   var findFileExt = function(_dir_path)
				   {
					   koFile.list(_dir_path).map(function(file){
						   
						   var file_match = search_extensions.exec(_dir_path+'\\'+file);
						   
						   if (file_match)
							   search_ext = file_match.pop();
						   //Logger.info(search_ext, 'MarkdownLinker: '+'search_ext'); 
					   }); 
				   }; 
					   
				   /* FIND EXTENSION AUTOMATICALY */ 
				   if( ! search_ext )
					   findFileExt(_dir_path);
				   
				   /* LOOP EACH FILE IN DIRECOTRY */ 
				   koFile.list(_dir_path).map(function(name)
				   {
					   
					   var file_path	= _dir_path +'\\'+ name;
				
						//console.log(  'file: ' + file_path );

					   if (file_path != current_file)
					   {
						   if( match_dir_name )
							   search_name = koFile.basename(_dir_path) + (match_dir_name===true ? '' : '.*');
						   //Logger.info(search_ext, 'MarkdownLinker: '+'search_ext');
						   //Logger.info(search_name, 'MarkdownLinker: '+'search_name');						
						   //Logger.info( new RegExp(search_name+'\.('+search_ext+')$', 'gi').exec(name) , 'match: '+name); 
						   
						   if( new RegExp( '^'+search_name+'\.('+search_ext+')$', 'gi').exec(name) )
							   match_files.push(file_path);
					   }
				   });
				};
				
				/** REMOVE EMPTY DIRS
				 */
				var removeEmptyDirs = function(dirs)
				{
					return dirs.filter(function(dir){
						return dir.length;
					});
				};
				
				/*------ SEARCH FOR FILES ------*/
	
				return removeEmptyDirs(match_files); 
			};
			
			
			/* ========= GET TREE ========= */

			var dir_tree = getDirectoryTree(current_dir);
			
			//developmentPrint( dir_tree ) ;
			
			/* ========= PRINT TREE ========= */

			function printTree(obj, prefix = "", relPath = "")
			{
				/*------ GET INDENTATION ------*/
				var getIndentation = function( _prefix, is_last )
				{
					
					//var whitespace_character = is_source ? ' ' : '&nbsp;';
					
					//var whitespace = Array( 3 ).join(whitespace_character);
					//var whitespace = is_source ? ( is_last ? '' : '    ') : '&nbsp;&nbsp;&nbsp;&nbsp;';
					var whitespace = is_source ? '    ': '&nbsp;&nbsp;&nbsp;&nbsp;';
					
					if(tree)
					{
						return prefix + (is_last ? whitespace : "|  " + whitespace);
					}
					else
						return indentation ? _prefix + whitespace : '' ;
				};
				
				
				/*------ SET INLCUDE FILE ------*/
				var setInlcudeFile = function( prefix, text, path, is_dir )
				{
					
					/** Get link text by dir name or sanitized filename file
					 * Filename is sanitized by replacing '-_' with space
					 *
					 * @return	string	Text of link
					 */
					var getLinkText = function(path)
					{
						//console.log(  'getLinkText: ' + koFile.basename(path) );

						return koFile.basename(path);
						
						 
						//if( show=='dir' )
							//return koFile.basename(koFile.dirname(path));
						
						var filename	= koFile.basename(path).split('.').shift().replace(/[-|_]/gi, ' ');
						
						return  filename.charAt(0).toUpperCase() + filename.slice(1);
					};
					/** findIncludeFileType
					 */
					//var findIncludeFileType = function()
					//{
					//	for(var file_type in rx_file_types)
					//		if (rx_file_types.hasOwnProperty(file_type))
					//			if( path.match(rx_file_types[file_type]) )
					//				return file_type;
					//};
					/** getMarkdownLink
					 */
					var getMarkdownLink = function( text, path, is_mage = false )
					{
					console.log(  'IS_MAGE: ' + is_mage  );
						var prefix_for_image = is_mage ? '!' : '';
						
						return prefix_for_image + '['+ text +']('+path+')';
					}
					
					/** getCodeblockLink
					 */
					var getCodeblockLink = function()
					{
						return '[include:\\'+_getRelativePath(current_dir, path).replace(/\//g, '\\') +']';
					}; 
					/** getFileLink
					 */
					var getFileLink = function(is_mage)
                    {
						if( html == true || is_mage  )
						{
							var link_text = is_mage && image_show ? '<img src="'+path+'" alt="'+text+'" >' : text;

							var link_color = is_dir ?  '#0091ff' : '#788894' ;
							
							return '<a href="'+path+'" style="color:'+link_color+';" >'+ link_text +'</a>';
						}
						else
							return getMarkdownLink( text, path );
							//return prefix_for_image+'['+ text +']('+path+')';
					};
					
					/** setLinkToIncludes
					 */
					var setLinkToIncludes = function(link)
					{
						if( _isNotInFile(link) )
							include_lines.push( getIndentation(indent_count, false, is_last ) + link );
					}; 

					/* ========= SHOWN TEXT ========= */

					is_mage = extension_image.exec(path) != null;
					
					//extension_image.lastIndex = 0; // reset regEx for next use
					
					console.log(  'image_show: ' + image_show  );
					
					switch (show) {
						/* SHOW PATH */ 
						case "path": text =  path.replace( /\//gi, '\\' );
						
						/* SHOW DIR */ 
						//case "dir": text =  "SHOW DIR";
						
						/* SHOW NAME */
						default: text =  text;
					}

					/* ADD SLASHES TO DIR */ 
					if(is_dir && ! show.match(/dir/gi))
						text = '\\ ' +text +' \\\\'
					
					/*------ LINK ------*/
						/*------ IMAGE ------*/
					if( image_show && is_mage && ! link )
						var line = getMarkdownLink( text, path, is_mage );
					else
					if( link )
					{
						var line = getFileLink(is_mage);
						 //var line = text_to_show
					}

					{
						
						
						/*------ CODEBLOCK ------*/
						/*------ INCLUDE ------*/
						
						//var line = switch(expression) {
						//	case x:
						//	  // code block
						//	  break;
						//	case y:
						//	  // code block
						//	  break;
						//	/*------ TEXT ------*/
						//	default:
						//	  // code block
						//}					
					}
					
					
					//var include_type = findIncludeFileType();
					//setLinkToIncludes( code_block && include_type=='codeblock'? getCodeblockLink() :getFileLink() );
					
					//include_lines.push( prefix + text + path );
					//include_lines.push( prefix + getFileLink() );
					//include_lines.push( prefix + text );
					include_lines.push( prefix + line );

				};
				
				
				
				/* ========= ITERATE TREE ========= */

				const keys = Object.keys(obj);
			
				keys.forEach((key, index) => {
					const is_last = index === keys.length - 1;
				
					var is_dir = isNaN(key)
				
					//const branch = is_last ? "ÃƒÂ¢Ã¢â‚¬ÂÃ¢â‚¬ÂÃƒÂ¢Ã¢â‚¬ÂÃ¢â€šÂ¬ÃƒÂ¢Ã¢â‚¬ÂÃ¢â€šÂ¬ " : "ÃƒÂ¢Ã¢â‚¬ÂÃ…â€œÃƒÂ¢Ã¢â‚¬ÂÃ¢â€šÂ¬ÃƒÂ¢Ã¢â‚¬ÂÃ¢â€šÂ¬ ";
					const branch = tree ? '|--- ' : '';
				
					/* ========= DIRECTORY ========= */

					if (isNaN(key))
					{
						const dir_path = relPath ? relPath + "/" + key : key;
					
						const fileCount = Object.keys(obj[key]).length;
						
						//include_lines.push( prefix + branch + key ) //+ "/ [" + fileCount + " files]   (" + dirPath + "/)");
						
						if( filter == null || filter == 'dir' )
							setInlcudeFile( prefix + branch, key, dir_path, is_dir );
						
						//const newPrefix = prefix + (is_last ? "    " : " |    ");
						const newPrefix = getIndentation(prefix, is_last);
						
						printTree(obj[key], newPrefix, dir_path);
					}
					/* ========= FILE ========= */

					else
					{
						const file_path = relPath ? relPath + "/" + obj[key] : obj[key];
					
						//include_lines.push(prefix + branch + obj[key] ) //+ "   (" + filePath + ")");
						
						if( filter == null || filter == 'file' )
							setInlcudeFile( prefix + branch, obj[key], file_path, is_dir );
					}
				});
			}

			
			
			
			if(dir_tree)
			{
				printTree(dir_tree);
				
				/*------ WRITE TO FILE ------*/
				writeToFile();
				
			}
		};

		/* ================ PRIVATE ================ */


		/** rx_escaped_string
		 */
		var _escapedRegexString = function(string)
		{
			return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&').replace(/\s+/g,'\\s+'); // $& means the whole matched string
		};
		
		/** _isNotInFile
		 */
		var _isNotInFile = function(string)
		{
			return file_content.match( new RegExp(_escapedRegexString(string), 'gi') )===null || ! unique || update;
		};
		
		/**
		 *
		 */
		var _getRelativePath = function(fromPath, toPath)
		{
			var nsFileFrom = Components.classes["@mozilla.org/file/local;1"]
								  .createInstance(Components.interfaces.nsILocalFile);
			nsFileFrom.initWithPath(fromPath);
			var nsFileTo = Components.classes["@mozilla.org/file/local;1"]
								  .createInstance(Components.interfaces.nsILocalFile);
			nsFileTo.initWithPath(toPath);
			return nsFileTo.getRelativeDescriptor(nsFileFrom);
		};
		
		/** writeToFile
		 */
		var writeToFile = function()
		{
			/** _updateContent
			 */
			var _updateContent = function()
			{
				/** getHeadings
				 */
				var getHeadings = function()
				{
					//return heading ? '## '+heading+'\n' : '';
					return heading ? heading+'\n' : '';
				};
				
				/** Update mode will update existing section
				 *	Section will be searched from heading up to next heading
				 *
				 * @return	{start: int, end: int}
		 */
		var getUpdatePosition = function()
				{
					var heading_match	= new RegExp( _escapedRegexString(getHeadings()) + '[^#]+', 'gmi').exec(file_content); 
					if( ! update || ! heading_match  )
						return null;
	
					//Logger.info(heading_match, 'MarkdownLinker: '+'heading_match');
					
					return { 'start': heading_match.index, 'end': heading_match.index + heading_match[0].length };
				};
	
				/** replaceRange
				 */
				var replaceRange = function(update_pos)
				{
					//alert('replaceRange');
					/* HERE IS BUG MAYBE - IT INSERST FILE TREE ON START OF FILE */ 
					var content_before 	= file_content.substring( 0,	update_pos.start );
					var content_after	= file_content.substring( update_pos.end,	koEditor.getLength() );				
					
					koEditor.setValue( content_before + content_update + '\n' );
					koEditor.goDocEnd();
					
					var end_of_range	= koEditor.getCursorPosition('absolute');
					koEditor.insert(content_after);
					koEditor.setCursor(end_of_range-1);
				};
				
				/** insertContent
				 */
				var insertContent = function()
				{
					/** goToInsertPosition
					 */
					var goToInsertPosition = function()
					{
						var line_content = koEditor.getLine( koEditor.getLineNumber() );
						
						if( ! line_content.match(/^\s*$/gi)  )
							koEditor.goLineEnd();
							//scimoz.newLine();
						else
							koEditor.goLineStart();
							
						//scimoz.newLine();
					};
					
					goToInsertPosition();
					
					//koEditor.insert( '\n'+ content_update );
					/*------ UPDATE CONTENT IN KOMODO ------*/
					koEditor.insert( content_update );
					//koEditor.insert( '```\n'+ content_update +'\n```' );
                };

			var content_update	= getHeadings() + include_lines.join('\n') + '\n';
			
			var update_pos	= getUpdatePosition();
	
				if( update_pos && heading!=='' )
					replaceRange(update_pos);				
				else
					insertContent();
				
			};
			
			if( ! include_lines.length  )
				return;

			ko.views.manager.currentView.scimoz.beginUndoAction();
			
			try {
				
				_updateContent();
				
			} finally {
				ko.views.manager.currentView.scimoz.endUndoAction();
			} 
		}; 
		
		initialized = true;
	}
	
	return MarkdownLinker;
  
})();